# Tiamat Offline - Ръководство за създаване на модел

Тази директория съдържа всички необходими файлове за създаване на изкуствения интелект (LightGBM), използван за търговия със злато. Следвайте това подробно ръководство, за да настроите вашата среда, подготвите данните и обучите вашия модел.

## Предварителни изисквания

1. Python 3.12 - Изтеглете от: https://www.python.org/downloads/release/python-3129/

2. Необходими Python библиотеки:
   - Навигирайте до директорията TiamatOffline в Command Prompt: `cd [Път]/TiamatOffline`
   - Инсталирайте всички зависимости: `pip install -r requirements.txt`
   - Това ще инсталира: numpy, pandas, scikit-learn, lightgbm, optuna, joblib, ta, backtesting, matplotlib, requests, questdb

3. Входни файлове с данни (включени в тази директория):
   - market_news.csv - Съдържа данни за пазарни новини
   - XAUUSD_M1_RAW.csv - Съдържа необработени данни за цените на златото

## Настройка и конфигурация на QuestDB

QuestDB е база данни за времеви серии, използвана за ефективно съхранение и заявки на финансови данни.

1. Изтеглете QuestDB:
   - Посетете: https://questdb.com/download/
   - Изтеглете ZIP файла и го разархивирайте в избрано от вас място

2. Стартиране на базата данни:
   - Навигирайте до разархивираната папка QuestDB
   - Отворете директорията 'bin'
   - Стартирайте questdb.exe
   - Базата данни ще се стартира на порт 9000 по подразбиране
   - Достъп до уеб конзолата: http://localhost:9000

3. Конфигурация на базата данни:
   - Стандартни данни за достъп: Първоначално не се изисква автентикация
   - Системата автоматично ще създаде необходимите таблици при стартиране на скриптовете за импорт на данни
   - Важно: Поддържайте QuestDB в работен режим по време на целия процес на създаване на модела

4. Отстраняване на проблеми с QuestDB:
   - Ако не можете да достъпите уеб конзолата, уверете се, че няма други приложения, използващи порт 9000
   - Ако операциите с базата данни се провалят, проверете логовете на QuestDB в директорията QuestDB/log
   - Проверете дали вашите Python скриптове имат мрежов достъп до localhost:9000

## Подготовка на данни

1. Импортиране на данни за новини:
   - Изпълнете: `python news_tz.py`
   - Този скрипт изисква market_news.csv да бъде в същата директория
   - Очаквано времетраене: 1-5 минути в зависимост от вашата система
   - Индикация за успех: Съобщение за потвърждение в конзолата

2. Импортиране и обработка на ценови данни:
   - Изпълнете: `python dataset_without_indicators.py`
   - Този скрипт изисква XAUUSD_M1_RAW.csv да бъде в същата директория
   - Това ще създаде базовия набор от данни с технически индикатори в QuestDB
   - Очаквано времетраене: 5-15 минути в зависимост от вашата система
   - Индикация за успех: Съобщение за потвърждение, показващо броя редове в базата данни

3. Проверка на импорта на данни:
   - Достъпете уеб конзолата на QuestDB на http://localhost:9000
   - Изпълнете заявка: `SELECT count(*) FROM XAUUSD_1M_TRAINING_WITH_FEATURES`
   - Трябва да видите хиляди редове, ако импортът е бил успешен

## Оптимизация на хиперпараметри и създаване на модел

Скриптът hyperparameters.py изпълнява множество итерации на обучение ("trials"), за да намери оптималната конфигурация на модела.

1. Стартиране на процеса на оптимизация:
   - Изпълнете: `python hyperparameters.py`
   - Важно: Това е изчислително интензивен процес!
   - Очаквано времетраене: 2-8 часа в зависимост от вашата система (N_TRIALS=50 по подразбиране)
   - Възможно е да изпитате забавяне на системата по време на този процес

2. Разбиране на процеса:
   - Скриптът ще изпълни множество тестове с различни конфигурации на модела
   - Всеки тест обучава на данни от 2018-2022 и валидира на данни от 2023
   - Скриптът следи метрики като Sharpe Ratio, Return %, Maximum Drawdown
   - Моделите с Sharpe Ratio > 1.0 се считат за обещаващи

3. Изход и резултати:
   - Прогресът се записва в конзолата с резултатите от тестовете
   - Най-добрите модели автоматично се запазват в директорията "best_models"
   - Визуализационните графики се запазват в директорията "charts"
   - Обобщен доклад се запазва в "Models/good_trials_report.txt"

4. Намиране на вашия най-добър модел:
   - След приключване, проверете директорията "best_models"
   - Моделите са именувани според номера на теста и Sharpe съотношението
   - Пример: "trial_42_sharpe_1.85.pkl"
   - По-високото Sharpe съотношение обикновено показва по-добра риск-коригирана производителност

## Използване на съществуващ модел

Ако не искате да преминете през процеса на оптимизация:

1. Навигирайте до директорията TiamatOnline, където е наличен предварително обучен модел:
   - model.pkl - Предварително обучен модел, готов за употреба
   - model2024graph.html - Визуализация на представянето на модела

2. За да използвате този модел за онлайн търговия, следвайте инструкциите във файла TiamatOnline/README.txt.

## Отстраняване на често срещани проблеми

- Ако QuestDB не стартира, опитайте да рестартирате компютъра си и се уверете, че няма друг процес, използващ порт 9000
- Ако Python скриптовете се сривят, проверете дали всички зависимости са правилно инсталирани чрез requirements.txt
- За грешки "out of memory" по време на оптимизацията на хиперпараметри, намалете N_TRIALS в hyperparameters.py
- Ако не са намерени добри модели, опитайте да регулирате параметрите в горната част на hyperparameters.py:
  - Увеличете N_TRIALS (напр. до 100) за по-задълбочена оптимизация
  - Настройте параметрите MIN_RR, PROB_THRESHOLD или TIMEFRAME

## Допълнителна информация

- Файлът hyperparameters.py използва Optuna за Bayesian оптимизация на параметрите на модела
- Крайният модел е LightGBM класификатор, който предсказва ценови движения в bins
- Системата използва сложен пайплайн за инженеринг на характеристики с технически индикатори
- Оценката на модела включва backtesting с реалистични условия за търговия