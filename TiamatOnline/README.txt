# Tiamat Online - Ръководство за автоматична търговия в реално време

В тази папка се съдържат всички необходими файлове за осъществяване на РЕАЛНА връзка и автоматична търговия от страна на изкуствения интелект с пазара на злато (XAUUSD).

## Предварителни изисквания

- **Python 3.12** - Изтеглете от: https://www.python.org/downloads/release/python-3129/
- **Python Библиотеки** - Инсталирайте с `pip install numpy pandas scikit-learn lightgbm joblib requests flask flask-cors flask-socketio`
- **Платформа MetaTrader 5** (достъпна чрез включената RDP връзка)
- **Visual Studio** за компилиране на DLL (при необходимост от промени)
- **Предварително обучен модел** (model.pkl, включен в папката)

## Архитектура на системата

Системата се състои от три основни компонента, които работят заедно:

### 1. MetaTrader 5 Скриптове:
   - `XAUUSD_SENDER.mq5`: Изпраща данни за цените към Python сървъра
   - `XAUUSD_DLL.mq5`: Изпълнява сделки на базата на сигнали от Python сървъра

### 2. Python Backend (`livepipeline.py`):
   - Зарежда предварително обучения модел за машинно обучение (LightGBM)
   - Анализира пазарните данни в реално време
   - Генерира търговски сигнали на базата на AI предвиждания
   - Поддържа комуникация с MetaTrader 5 чрез три отделни канала:
     * HTTP сървър за получаване на данни за цените
     * API сървър за команди и контрол
     * Socket сървър за комуникация с DLL

### 3. Уеб интерфейс:
   - Мониторинг на свързаните устройства
   - Проследяване на търговската производителност
   - Графично представяне на резултатите

## Инструкции за настройка (стъпка по стъпка)

### Стъпка 1: Подготовка на данни за новините
1. Изтеглете данни за високо-импактни новини от: https://robots4forex.com/historical-forex-economic-calendar-2007-present-csv-format/
2. Поставете CSV файла в папката TiamatOnline
3. Преименувайте го на: `high_impact_news.csv`
4. Уверете се, че файлът съдържа колони с дата, време и важност на новините

### Стъпка 2: Стартиране на Python сървъра
1. Отворете Command Prompt като администратор
2. Навигирайте до директорията TiamatOnline: `cd път/до/TiamatOnline`
3. Стартирайте сървъра: `python livepipeline.py`
4. **Важно**: Изчакайте докато видите всички потвърждаващи съобщения:
   ```
   HTTP сървър стартиран на порт 8020
   API сървър стартиран на порт 8000
   Socket сървър стартиран на порт 12345
   Системата е готова за приемане на връзки
   ```
5. Сървърът ще зареди предварително обучения модел (model.pkl) автоматично
6. Прозорецът на Command Prompt трябва да остане отворен през цялото време на работа

### Стъпка 3: Настройка на MetaTrader платформата

#### 3.1: Свързване към MetaTrader средата
1. Отворете файла `MetaTrader.rdp` в текущата директория, за да се свържете с подготвената Windows среда
2. Използвайте предоставените данни за вход (ако се изискват)
3. След свързване, трябва да видите предварително конфигурирана MetaTrader 5 инсталация

#### 3.2: Подготовка на DLL (при необходимост от промени)
1. В RDP средата, отворете проекта "SignalProvider" във Visual Studio
   - Намерете го в директорията "SignalProvider" в текущата папка
2. Актуализирайте IP адреса в кода, за да съвпада с вашето устройство (където се изпълнява livepipeline.py)
   - Ако всичко се изпълнява на същия компютър, използвайте "127.0.0.1"
3. Конфигурирайте правилно проекта:
   - Target Platform: x64
   - Конфигурация: Release
   - Runtime Library: Multi-Threaded Debug (/MTD)
   - Кликнете с десен бутон върху проекта → Properties
   - Навигирайте до C/C++ → Code Generation
   - Задайте Runtime Library на "Multi-Threaded Debug (/MTD)"
4. Компилирайте проекта (Build → Build Solution)
5. Намерете компилирания DLL файл в изходната папка (обикновено в x64/Release)
6. Копирайте DLL файла в папката "Libraries" в MetaTrader:
   - Обикновено път: C:\Program Files\MetaTrader 5\MQL5\Libraries\

#### 3.3: Конфигуриране на MetaTrader настройки
1. В MetaTrader, кликнете върху "Tools" в горното меню
2. Изберете "Options" и после таб "Expert Advisors"
3. Активирайте следните опции:
   - "Allow Automated Trading"
   - "Allow DLL imports"
   - "Allow WebRequest for listed URL:" (добавете адреса на вашия Python сървър)
4. Кликнете "OK" за да запазите промените

#### 3.4: Прикрепване на скриптове към графики
1. Отворете две графики XAUUSD с времеви интервал M1 (1 минута)
2. На първата графика:
   - Намерете `Tiamat_Sender.ex5` в Navigator панела (Expert Advisors)
   - Плъзнете и пуснете върху графиката
   - В диалога за настройки, уверете се че:
     * ServerURL е зададен правилно (напр. "http://127.0.0.1:8020")
     * Кликнете "OK" за да стартирате
3. На втората графика:
   - Намерете `Tiamat_DLL.ex5` в Navigator панела
   - Плъзнете и пуснете върху графиката
   - Проверете параметрите и кликнете "OK"
4. Проверете дали и двата скрипта показват "AutoTrading enabled" в горния десен ъгъл на графиките

### Стъпка 4: Стартиране на уеб интерфейса (опционално)
1. Уеб интерфейсът се достъпва на http://127.0.0.1:8000 ако сървърът работи локално
2. Използвайте го за:
   - Преглед на текущо свързаните устройства
   - Проследяване на направените сделки
   - Мониторинг на представянето на модела

## Опции за конфигурация

Сървърът `livepipeline.py` има няколко конфигурируеми параметъра, които могат да бъдат променени в началото на файла:

- `HOST`: IP адрес на сървъра (по подразбиране: "0.0.0.0")
- `HTTP_PORT`: Порт за получаване на данни за баровете (по подразбиране: 8020)
- `API_PORT`: Порт за API команди (по подразбиране: 8000)
- `SOCKET_PORT`: Порт за DLL комуникация (по подразбиране: 12345)
- `MAX_CONCURRENT_TRADES`: Максимален брой едновременни сделки (по подразбиране: 1)
- `DEFAULT_RISK_PCT`: Процент риск по подразбиране за всяка сделка (по подразбиране: 2%)
- `BUFFER_SIZE`: Брой ценови барове, които да се съхраняват в паметта (по подразбиране: 300)

## Проверка на работоспособността

Когато системата е правилно настроена, трябва да видите следните индикации:

1. В конзолата на Python сървъра:
   - Съобщения за свързани клиенти
   - Логове за получени пазарни данни
   - Съобщения за генерирани търговски сигнали

2. В MetaTrader:
   - Надпис "AutoTrading enabled" на всяка графика
   - Журналът трябва да показва съобщения за успешна комуникация
   - Сделки се изпълняват автоматично при сигнал

Системата е проектирана да търгува консервативно и обикновено влиза в 1-2 сделки на ден, в зависимост от пазарните условия и новинарските събития.

## Ограничения и безопасност

Системата автоматично ще избягва търговия при следните условия:
- По време на високо-импактни новинарски събития (±20 минути около събитието)
- По време на периода за поддръжка на пазара (между 22:00 и 00:00 часа)
- При необичайна волатилност на пазара
- Когато е достигнат MAX_CONCURRENT_TRADES лимит

## Отстраняване на проблеми

### Проблеми с връзката:
- **Симптом**: MetaTrader не се свързва с Python сървъра
- **Решения**:
  1. Проверете дали всички IP адреси са правилно конфигурирани
  2. Уверете се, че защитната стена (firewall) позволява трафик на портове 8000, 8020 и 12345
  3. Проверете дали Python сървърът е стартиран преди опита за свързване от MetaTrader
  4. Проверете логовете на Python сървъра за грешки
  5. Рестартирайте и двете приложения, започвайки първо с Python сървъра

### Проблеми с изпълнението на сделки:
- **Симптом**: Сигналите се генерират, но сделките не се изпълняват
- **Решения**:
  1. Проверете дали DLL е правилно компилиран и поставен в папката Libraries на MetaTrader
  2. Уверете се, че "Allow Automated Trading" и "Allow DLL imports" са активирани в настройките
  3. Проверете журнала на MetaTrader за грешки при зареждане на DLL
  4. Проверете логовете и на двете системи за информация за грешки
  5. Уверете се, че сметката има достатъчно средства и марджин за търговия

### Проблеми с модела:
- **Симптом**: Системата работи, но не генерира сигнали
- **Решения**:
  1. Проверете дали model.pkl файлът е в правилната директория
  2. Проверете дали в логовете на Python сървъра има съобщения за успешно зареждане на модела
  3. Уверете се, че получените данни от MetaTrader съдържат правилните полета
  4. Разгледайте model2024graph.html файла за информация относно очакваното поведение на модела

## Логове и мониторинг

Python сървърът генерира подробни логове, които можете да следите директно в конзолата. Тези логове включват информация за:
- Свързани клиенти и техните IP адреси
- Получени пазарни данни (барове) и тяхното съдържание
- Генерирани търговски сигнали с обосновка
- Изпълнения на сделки и потвърждения
- Всички грешки и предупреждения

MetaTrader също генерира логове в своя "Experts" таб, които могат да бъдат полезни при отстраняване на проблеми.

## Обновяване на модела

Ако желаете да актуализирате използвания търговски модел:
1. Генерирайте нов модел, следвайки инструкциите в TiamatOffline
2. Копирайте най-добрия модел (от директорията "best_models") в текущата директория
3. Преименувайте го на "model.pkl", заменяйки съществуващия
4. Рестартирайте Python сървъра, за да зареди новия модел