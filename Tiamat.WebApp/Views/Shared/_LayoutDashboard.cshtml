@using System.Security.Claims
@using Tiamat.Core.Services.Interfaces
@using Tiamat.Models
@inject IAccountService accountService
@inject INotificationService notificationService

<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/iziToast/css/iziToast.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/5.3.3/cyborg/bootstrap.min.css" />
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" />
    <link rel="stylesheet" href="~/css/customstyle.css" />
    <link rel="stylesheet" href="~/css/dashboardstyle.css" />
    <style>
        body {
            overflow-x: hidden;
        }

        .sidebar {
            width: 60px;
            transition: all 0.3s ease;
            background-color: #0d0d0d;
            color: #fff;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            border-right: 1px solid #333;
            box-shadow: 2px 0 6px rgba(0, 0, 0, 0.5);
            position: fixed;
            z-index: 1030;
        }

            .sidebar:hover {
                width: 250px;
            }

                .sidebar:hover ~ .content-wrapper {
                    margin-left: 250px;
                    width: calc(100% - 250px);
                }

        .sidebar-collapsed {
            width: 0;
            overflow: hidden;
        }

        .logo-container {
            text-align: center;
            padding: 1rem 0;
            border-bottom: 1px solid #333;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .logo-wrapper {
            position: relative;
            display: inline-block;
            margin-bottom: 1rem;
        }

            .logo-wrapper img {
                max-height: 40px;
                transition: all 0.3s ease;
            }

        .logo-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: opacity 0.3s ease;
        }

        .sidebar:hover .logo-badge {
            opacity: 0;
            visibility: hidden;
        }

        .user-info {
            opacity: 0;
            transition: all 0.3s ease;
            white-space: nowrap;
            width: 100%;
        }

        .sidebar:hover .user-info {
            opacity: 1;
        }

        .user-info .bell-icon {
            position: relative;
        }

            .user-info .bell-icon .badge {
                top: -6px;
                right: -10px;
                opacity: 0;
                transition: opacity 0.3s ease 0.1s;
            }

        .sidebar:hover .user-info .bell-icon .badge {
            opacity: 1;
        }

        .user-info span,
        .user-info sub {
            display: inline-block;
        }

        .nav-link {
            color: #ccc;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            transition: background-color 0.2s ease, color 0.2s ease;
            white-space: nowrap;
        }

            .nav-link:hover {
                background-color: #222;
                color: #fff;
                text-decoration: none;
            }

        .custom-nav-item.active > .nav-link {
            background-color: #333;
            color: #fff;
        }

        .logout-btn {
            color: #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            transition: background-color 0.2s ease, color 0.2s ease;
            background: none;
            border: none;
            text-align: center;
            width: 100%;
            white-space: nowrap;
        }

            .logout-btn:hover {
                background-color: #222;
                color: #fff;
                cursor: pointer;
            }

        .sidebar-footer {
            border-top: 1px solid #333;
            padding: 1rem;
            text-align: center;
            font-size: 0.85rem;
            color: #aaa;
            white-space: nowrap;
        }

            .sidebar-footer a {
                color: #aaa;
                text-decoration: none;
            }

                .sidebar-footer a:hover {
                    color: #fff;
                    text-decoration: underline;
                }

        .admin-heading,
        .sidebar-text {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .sidebar:hover .admin-heading,
        .sidebar:hover .sidebar-text {
            opacity: 1;
        }

        hr {
            border-color: #333;
            margin: 0.5rem 1rem;
        }

        .content-wrapper {
            margin-left: 60px;
            transition: all 0.3s ease;
            width: calc(100% - 60px);
        }

        .mobile-toggle {
            display: none;
            position: fixed;
            top: 10px;
            left: 10px;
            z-index: 1040;
            background-color: rgba(13, 13, 13, 0.8);
            border: 1px solid #333;
            color: #fff;
            border-radius: 4px;
            padding: 0.5rem;
            font-size: 1.2rem;
        }

        .layout-modal-content {
            border-radius: 8px;
            border: 1px solid #444;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
        }

        .layout-modal-header {
            border-bottom: 1px solid #444;
            background-color: #1a1a1a;
            border-top-left-radius: 7px;
            border-top-right-radius: 7px;
        }

        .layout-modal-footer {
            border-top: 1px solid #444;
            background-color: #1a1a1a;
            border-bottom-left-radius: 7px;
            border-bottom-right-radius: 7px;
        }

        .notification-item {
            text-decoration: none;
            display: block;
            padding: 12px;
            border-radius: 6px;
            transition: all 0.2s ease;
            margin-bottom: 8px;
            background-color: #222;
            border-left: 4px solid #0d6efd;
        }

            .notification-item:not(.notification-read) {
                font-weight: bold;
                background-color: #1a1a1a;
            }

                .notification-item:not(.notification-read):hover {
                    background-color: #222;
                    transform: translateX(4px);
                }

            .notification-item.notification-read {
                font-weight: normal;
                border-left-color: #555;
                color: #aaa;
                text-decoration: none;
            }

                .notification-item.notification-read:hover {
                    background-color: #292929;
                }

        .notification-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 6px;
            font-size: 0.8rem;
            color: #777;
        }

        #layoutNotificationDetailContainer {
            background-color: #222;
            padding: 16px;
            border-radius: 6px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        #layoutDetailTitle {
            color: #fff;
            border-bottom: 1px solid #444;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }

        #layoutDetailDescription {
            line-height: 1.5;
            margin-bottom: 16px;
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            margin-bottom: 10px;
        }

        .pagination-btn {
            background-color: #333;
            color: #fff;
            border: none;
            padding: 5px 12px;
            margin: 0 5px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .pagination-btn:hover {
                background-color: #444;
            }

            .pagination-btn.active {
                background-color: #0d6efd;
            }

            .pagination-btn:disabled {
                background-color: #222;
                color: #666;
                cursor: not-allowed;
            }

        .page-info {
            color: #aaa;
            text-align: center;
            margin-top: 5px;
            font-size: 0.9rem;
        }

        @@media(max-width: 991.98px) {
            .sidebar {
                transform: translateX(-100%);
                position: fixed;
                top: 0;
                left: 0;
                width: 250px;
                z-index: 1040;
            }

                .sidebar.show {
                    transform: translateX(0);
                }

                .sidebar:hover {
                    width: 250px;
                }

                    .sidebar:hover ~ .content-wrapper {
                        margin-left: 0;
                        width: 100%;
                    }

            .sidebar-text,
            .admin-heading,
            .user-info {
                opacity: 1;
            }

            .content-wrapper {
                margin-left: 0;
                width: 100%;
            }

            .mobile-toggle {
                display: block;
            }
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .notification-item {
            animation: fadeIn 0.3s ease-out forwards;
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100 text-white">
    @{
        var userIdString = User.FindFirstValue(ClaimTypes.NameIdentifier);
        Guid? userId = null;
        if (!string.IsNullOrWhiteSpace(userIdString))
        {
            userId = Guid.Parse(userIdString);
        }
        var userName = User.Identity?.Name;
        var userRole = User.FindFirstValue(ClaimTypes.Role) ?? "No Role";
        var userNotifications = new List<NotificationUser>();
        if (userId.HasValue)
        {
            userNotifications = notificationService.GetUserNotificationsUserAsync(userId).GetAwaiter().GetResult().ToList();
        }
        var totalUnreadCount = userNotifications.Count(nu => !nu.IsRead);
    }

    <button class="mobile-toggle btn" id="sidebarToggle">
        <i class="bi bi-list"></i>
    </button>

    <div class="container-fluid p-0">
        <div class="row g-0">
            <nav class="sidebar" id="sidebar">
                <div>
                    <div class="logo-container">
                        <div class="logo-wrapper">
                            <a asp-controller="Home" asp-action="Index" id="logo">
                                <img src="~/images/tiamat_logo.png" alt="Tiamat Лого" />
                                @if (totalUnreadCount > 0)
                                {
                                    <span class="logo-badge">@totalUnreadCount</span>
                                }
                            </a>
                        </div>
                        <div class="user-info d-flex align-items-center justify-content-center" style="gap: 0.5rem;">
                            <div class="bell-icon">
                                <a href="#" class="text-white" data-bs-toggle="modal" data-bs-target="#layoutNotificationModal">
                                    <i class="bi bi-bell fs-5"></i>
                                    @if (totalUnreadCount > 0)
                                    {
                                        <span class="badge bg-danger position-absolute">@totalUnreadCount</span>
                                    }
                                </a>
                            </div>
                            <span class="fw-bold">@userName</span>
                            <sub class="text-secondary">
                                (@userRole)
                            </sub>
                        </div>
                    </div>
                    <ul class="nav flex-column" style="gap: 0.6rem; margin-top: 1rem;">
                        <li class="nav-item custom-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "User" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard") ? "active" : "")">
                            <a class="nav-link" asp-controller="User" asp-action="Dashboard" id="home-link">
                                <i class="bi bi-speedometer2"></i>
                                <span class="sidebar-text">Табло</span>
                            </a>
                        </li>
                        <li class="nav-item custom-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "User" && ViewContext.RouteData.Values["action"]?.ToString() == "AccountCenter") ? "active" : "")">
                            <a class="nav-link" asp-controller="User" asp-action="AccountCenter" id="about-link">
                                <i class="bi bi-person-circle"></i>
                                <span class="sidebar-text">Акаунти</span>
                            </a>
                        </li>
                        <li class="nav-item custom-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "User" && ViewContext.RouteData.Values["action"]?.ToString() == "Settings") ? "active" : "")">
                            <a class="nav-link" asp-controller="User" asp-action="Settings" id="settings-link">
                                <i class="bi bi-gear"></i>
                                <span class="sidebar-text">Настройки</span>
                            </a>
                        </li>
                        @if (userRole == "admin")
                        {
                            <hr class="mx-auto w-75" style="border-color: #333;" />
                            <span class="admin-heading text-secondary d-block text-center">Администратор</span>
                            <li class="nav-item custom-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Admin" && ViewContext.RouteData.Values["action"]?.ToString() == "UserCenter" ? "active" : "")">
                                <a class="nav-link" asp-controller="Admin" asp-action="UserCenter">
                                    <i class="bi bi-people"></i>
                                    <span class="sidebar-text">Потребители</span>
                                </a>
                            </li>
                            <li class="nav-item custom-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Admin" && ViewContext.RouteData.Values["action"]?.ToString() == "Notification" ? "active" : "")">
                                <a class="nav-link" asp-controller="Admin" asp-action="Notification">
                                    <i class="bi bi-bell-fill"></i>
                                    <span class="sidebar-text">Известия</span>
                                </a>
                            </li>
                            <li class="nav-item custom-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Admin" && ViewContext.RouteData.Values["action"]?.ToString() == "AccountReview" ? "active" : "")">
                                <a class="nav-link" asp-controller="Admin" asp-action="AccountReview">
                                    <i class="bi bi-search"></i>
                                    <span class="sidebar-text">Прегледи</span>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
                <div class="mt-auto w-100">
                    <ul class="nav flex-column" style="gap: 0.6rem; margin-top: 1rem;">
                        <li class="nav-item custom-nav-item">
                            <form asp-controller="User" asp-action="Logout" method="post" class="m-0">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="logout-btn">
                                    <i class="bi bi-box-arrow-right"></i>
                                    <span class="sidebar-text">Изход</span>
                                </button>
                            </form>
                        </li>
                    </ul>
                    <div class="sidebar-footer">
                        © 2025 - Tiamat.WebApp<br />
                        <a href="#">Поверителност</a>
                    </div>
                </div>
            </nav>
            <div class="content-wrapper">
                <main class="p-4">
                    @RenderBody()
                </main>
            </div>
        </div>
    </div>

    <div class="modal fade" id="layoutNotificationModal" tabindex="-1" aria-labelledby="layoutNotificationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg">
            <div class="modal-content bg-dark text-white layout-modal-content">
                <div class="modal-header border-secondary layout-modal-header">
                    <h5 class="modal-title" id="layoutNotificationModalLabel">
                        <i class="bi bi-bell me-2"></i>Известия
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Затвори"></button>
                </div>
                <div class="modal-body">
                    <div id="layoutNotificationListContainer">
                        <div id="layoutNotificationsContent">
                            @if (userNotifications.Any())
                            {
                                foreach (var userNotif in userNotifications)
                                {
                                    var note = userNotif.Notification;
                                    <div class="notification-item-container">
                                        <div class="notification-item text-white @(userNotif.IsRead ? "notification-read" : "")"
                                             data-id="@note.Id"
                                             data-title="@note.Title"
                                             data-description="@note.Description"
                                             data-datetime="@note.DateTime.ToLocalTime().ToString("g")"
                                             data-isread="@userNotif.IsRead">
                                            <div class="notification-title">@note.Title</div>
                                            <div class="notification-meta">
                                                <span>
                                                    <i class="bi bi-clock me-1"></i>@note.DateTime.ToLocalTime().ToString("g")
                                                </span>
                                                <span>
                                                    @if (userNotif.IsRead)
                                                    {
                                                        <i class="bi bi-check-all text-success"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-envelope-fill text-info"></i>
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-bell-slash fs-1 mb-3 text-secondary"></i>
                                    <p>Няма намерени известия.</p>
                                </div>
                            }
                        </div>

                        @if (userNotifications.Count > 5)
                        {
                            <div class="pagination-container">
                                <button id="layoutPrevPageBtn" class="pagination-btn" disabled>
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                                <div id="layoutPaginationNumbers" class="d-flex"></div>
                                <button id="layoutNextPageBtn" class="pagination-btn">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </div>
                            <div class="page-info" id="layoutPageInfo"></div>
                        }
                    </div>

                    <div id="layoutNotificationDetailContainer" style="display:none;">
                        <h5 id="layoutDetailTitle"></h5>
                        <div id="layoutDetailDescription" class="mt-3 mb-4"></div>
                        <div id="layoutDetailDate" class="text-muted" style="font-size:0.85rem;">
                            <i class="bi bi-clock me-1"></i><span id="layoutDetailDateTime"></span>
                        </div>
                        <form asp-controller="User" asp-action="MarkNotificationAsRead" method="post" id="layoutMarkSingleForm" class="mt-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="notificationId" id="layoutHiddenNotificationId" />
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-secondary" id="layoutBackToListBtn">
                                    <i class="bi bi-arrow-left me-1"></i>Назад
                                </button>
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-check-circle me-1"></i>Отбележи като прочетено
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="modal-footer border-secondary layout-modal-footer">
                    <form asp-controller="User" asp-action="MarkAllAsRead" id="layoutMarkAllForm" method="post" class="m-0">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="bi bi-check-all me-1"></i>Отбележи всички като прочетени
                        </button>
                    </form>
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Затвори</button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/iziToast/js/iziToast.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const contentWrapper = document.querySelector('.content-wrapper');

            sidebarToggle.addEventListener('click', function() {
                sidebar.classList.toggle('show');
            });

            document.addEventListener('click', function(event) {
                const isSidebarClick = sidebar.contains(event.target);
                const isToggleClick = sidebarToggle.contains(event.target);

                if (!isSidebarClick && !isToggleClick && window.innerWidth < 992 && sidebar.classList.contains('show')) {
                    sidebar.classList.remove('show');
                }
            });

            window.addEventListener('resize', function() {
                if (window.innerWidth >= 992) {
                    sidebar.classList.remove('show');
                }
            });

            const navbarLinks = document.querySelectorAll(".nav-link");
            navbarLinks.forEach(link => {
                link.addEventListener("mousedown", function () {
                    this.style.transform = "scale(0.97)";
                });
                link.addEventListener("mouseup", function () {
                    this.style.transform = "";
                });
            });

            const layoutListContainer = document.getElementById("layoutNotificationListContainer");
            const layoutDetailContainer = document.getElementById("layoutNotificationDetailContainer");
            const layoutDetailTitle = document.getElementById("layoutDetailTitle");
            const layoutDetailDescription = document.getElementById("layoutDetailDescription");
            const layoutDetailDate = document.getElementById("layoutDetailDateTime");
            const layoutHiddenNotificationId = document.getElementById("layoutHiddenNotificationId");

            const itemsPerPage = 5;
            let layoutCurrentPage = 1;
            const layoutNotificationItems = document.querySelectorAll(".notification-item-container");
            const layoutTotalPages = Math.ceil(layoutNotificationItems.length / itemsPerPage);

            if (layoutNotificationItems.length > itemsPerPage) {
                initLayoutPagination();
                displayLayoutPage(1);
            }

            document.querySelectorAll(".notification-item").forEach(item => {
                item.addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    layoutDetailTitle.textContent = this.dataset.title;
                    layoutDetailDescription.textContent = this.dataset.description;
                    layoutDetailDate.textContent = this.dataset.datetime;
                    layoutHiddenNotificationId.value = this.dataset.id;
                    layoutListContainer.style.display = "none";
                    layoutDetailContainer.style.display = "block";
                });
            });

            document.getElementById("layoutBackToListBtn").addEventListener("click", function () {
                layoutDetailContainer.style.display = "none";
                layoutListContainer.style.display = "block";
            });

            const layoutMarkForm = document.getElementById("layoutMarkSingleForm");
            layoutMarkForm.addEventListener("submit", function (e) {
                e.preventDefault();
                const formData = new FormData(layoutMarkForm);
                fetch(layoutMarkForm.action, {
                    method: "POST",
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const badge = document.querySelector(".badge.bg-danger");
                        const logoBadge = document.querySelector(".logo-badge");

                        if (badge && logoBadge) {
                            badge.textContent = data.unreadCount;
                            logoBadge.textContent = data.unreadCount;

                            if (data.unreadCount === 0) {
                                badge.style.display = "none";
                                logoBadge.style.display = "none";
                            }
                        }

                        const notifId = formData.get("notificationId");
                        const clickedItem = document.querySelector(`.notification-item[data-id='${notifId}']`);
                        if (clickedItem) {
                            clickedItem.classList.add("notification-read");
                            clickedItem.dataset.isread = "true";
                            const statusIcon = clickedItem.querySelector(".notification-meta span:last-child i");
                            if (statusIcon) {
                                statusIcon.className = "bi bi-check-all text-success";
                            }
                        }
                        layoutDetailContainer.style.display = "none";
                        layoutListContainer.style.display = "block";
                    }
                })
                .catch(err => console.error(err));
            });

            const layoutMarkAllForm = document.getElementById("layoutMarkAllForm");
            layoutMarkAllForm.addEventListener("submit", function (e) {
                e.preventDefault();
                const formData = new FormData(layoutMarkAllForm);

                fetch(layoutMarkAllForm.action, {
                    method: "POST",
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.querySelectorAll(".notification-item").forEach(item => {
                            item.classList.add("notification-read");
                            item.dataset.isread = "true";
                            const statusIcon = item.querySelector(".notification-meta span:last-child i");
                            if (statusIcon) {
                                statusIcon.className = "bi bi-check-all text-success";
                            }
                        });

                        const badge = document.querySelector(".badge.bg-danger");
                        const logoBadge = document.querySelector(".logo-badge");

                        if (badge && logoBadge) {
                            badge.textContent = data.unreadCount;
                            logoBadge.textContent = data.unreadCount;

                            if (data.unreadCount === 0) {
                                badge.style.display = "none";
                                logoBadge.style.display = "none";
                            }
                        }
                    } else {
                        console.error("Failed to mark all notifications as read");
                    }
                })
                .catch(err => console.error("Error during fetch:", err));
            });

            function initLayoutPagination() {
                const prevPageBtn = document.getElementById("layoutPrevPageBtn");
                const nextPageBtn = document.getElementById("layoutNextPageBtn");
                const paginationNumbers = document.getElementById("layoutPaginationNumbers");
                const pageInfo = document.getElementById("layoutPageInfo");

                for (let i = 1; i <= layoutTotalPages; i++) {
                    const pageBtn = document.createElement("button");
                    pageBtn.className = "pagination-btn" + (i === 1 ? " active" : "");
                    pageBtn.textContent = i;
                    pageBtn.addEventListener("click", function() {
                        displayLayoutPage(i);
                    });
                    paginationNumbers.appendChild(pageBtn);
                }

                prevPageBtn.addEventListener("click", function() {
                    if (layoutCurrentPage > 1) {
                        displayLayoutPage(layoutCurrentPage - 1);
                    }
                });

                nextPageBtn.addEventListener("click", function() {
                    if (layoutCurrentPage < layoutTotalPages) {
                        displayLayoutPage(layoutCurrentPage + 1);
                    }
                });

                updateLayoutPageInfo();
            }

            function displayLayoutPage(pageNumber) {
                layoutCurrentPage = pageNumber;

                const paginationBtns = document.querySelectorAll("#layoutPaginationNumbers .pagination-btn");
                paginationBtns.forEach((btn, index) => {
                    btn.classList.toggle("active", index + 1 === layoutCurrentPage);
                });

                const prevPageBtn = document.getElementById("layoutPrevPageBtn");
                const nextPageBtn = document.getElementById("layoutNextPageBtn");
                prevPageBtn.disabled = layoutCurrentPage === 1;
                nextPageBtn.disabled = layoutCurrentPage === layoutTotalPages;

                const startIndex = (layoutCurrentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;

                layoutNotificationItems.forEach((item, index) => {
                    item.style.display = (index >= startIndex && index < endIndex) ? "block" : "none";
                });

                updateLayoutPageInfo();
            }

            function updateLayoutPageInfo() {
                const pageInfo = document.getElementById("layoutPageInfo");
                if (pageInfo) {
                    pageInfo.textContent = `Страница ${layoutCurrentPage} от ${layoutTotalPages}`;
                }
            }
        });
    </script>
    @RenderSection("Scripts", required: false)
    @Html.Partial("_iziToastPartial")
</body>
</html>