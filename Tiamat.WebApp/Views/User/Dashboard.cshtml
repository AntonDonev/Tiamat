@using Tiamat.Models
@using Tiamat.WebApp.Models
@using static Tiamat.WebApp.Models.DashboardViewModel
@model DashboardViewModel

@{
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    ViewData["Title"] = "Моето табло";
}

<link rel="stylesheet" href="~/css/loginStyle.css" />

<style>
    #particles-js {
        position: fixed !important;
        width: 100% !important;
        height: 100% !important;
        top: 0 !important;
        left: 0 !important;
        z-index: -1 !important;
    }

    .dark-card {
        background-color: #1a1a1a !important;
        border: 1px solid #333 !important;
        border-radius: 10px !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3) !important;
        transition: transform 0.2s, box-shadow 0.2s !important;
    }

        .dark-card:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4) !important;
        }

        .dark-card .card-title {
            color: #fff !important;
            font-weight: 600 !important;
            letter-spacing: 0.5px !important;
        }

    .notification-card {
        border-left: 4px solid #7367f0 !important;
        transition: all 0.3s ease !important;
    }

    .table-custom {
        width: 100% !important;
        border-collapse: separate !important;
        border-spacing: 0 6px !important;
        background-color: transparent !important;
        color: #fff !important;
        margin: 0 !important;
        padding: 0 !important;
    }

        .table-custom thead th {
            background-color: #333 !important;
            color: #fff !important;
            border: none !important;
            padding: 0.8rem !important;
            margin: 0 !important;
            font-weight: 600 !important;
            text-transform: uppercase !important;
            font-size: 0.85rem !important;
            letter-spacing: 0.5px !important;
        }

        .table-custom tbody tr {
            background-color: #2c2c2c !important;
            margin: 8px 0 !important;
            padding: 0 !important;
            border-radius: 8px !important;
            transition: transform 0.2s, background-color 0.2s !important;
        }

            .table-custom tbody tr td {
                padding: 1rem 0.8rem !important;
            }

            .table-custom tbody tr:not(:first-child) {
                border-top: none !important;
            }

        .table-custom td,
        .table-custom th {
            border: none !important;
            margin: 0 !important;
        }

        .table-custom tbody tr:hover {
            background-color: #3a3a3a !important;
            transform: translateX(2px) !important;
        }

    .modal {
        position: fixed !important;
        z-index: 9999 !important;
        left: 0 !important;
        top: 0 !important;
        width: 100% !important;
        height: 100% !important;
        overflow: auto !important;
        background-color: rgba(0,0,0,0.7) !important;
        opacity: 0 !important;
        visibility: hidden !important;
        transition: opacity 0.3s, visibility 0.3s !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
    }

        .modal.show {
            opacity: 1 !important;
            visibility: visible !important;
        }

    .modal-content {
        background-color: #2c2c2c !important;
        color: #fff !important;
        margin: 0 auto !important;
        padding: 2rem !important;
        width: 90% !important;
        max-width: 600px !important;
        border-radius: 12px !important;
        border: 1px solid #3a3a3a !important;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5) !important;
        transform: translateY(-20px) scale(0.95) !important;
        transition: all 0.3s ease !important;
        position: relative !important;
    }

    .modal.show .modal-content {
        transform: translateY(0) scale(1) !important;
    }

    .modal-header {
        border-bottom: 1px solid #444 !important;
        padding-bottom: 1rem !important;
        margin-bottom: 1.5rem !important;
    }

    .modal-title {
        font-size: 1.5rem !important;
        font-weight: 600 !important;
        color: #7367f0 !important;
        margin: 0 !important;
    }

    .modal-body {
        padding: 1rem 0 !important;
        font-size: 1rem !important;
        line-height: 1.6 !important;
    }

    .modal-footer {
        padding-top: 1.5rem !important;
        border-top: 1px solid #444 !important;
        margin-top: 1rem !important;
        display: flex !important;
        justify-content: flex-end !important;
    }

    .dark-theme .btn-primary {
        background-color: #7367f0 !important;
        border: none !important;
        color: #ffffff !important;
        border-radius: 6px !important;
        transition: all 0.2s ease !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
    }

        .dark-theme .btn-primary:hover {
            background-color: #655bd3 !important;
            transform: translateY(-1px) !important;
            box-shadow: 0 4px 10px rgba(115, 103, 240, 0.4) !important;
        }

    .dark-theme .btn-secondary {
        background-color: #444444 !important;
        border: none !important;
        color: #ffffff !important;
        border-radius: 6px !important;
        transition: all 0.2s ease !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
    }

        .dark-theme .btn-secondary:hover {
            background-color: #555 !important;
            transform: translateY(-1px) !important;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2) !important;
        }

    .notification-title {
        color: #fff !important;
        font-weight: 500 !important;
        font-size: 1.1rem !important;
        transition: color 0.2s !important;
        display: block !important;
        margin-bottom: 0.5rem !important;
    }

        .notification-title:hover {
            color: #7367f0 !important;
        }

    .notification-meta {
        display: flex !important;
        align-items: center !important;
        color: #aaa !important;
        font-size: 0.85rem !important;
    }

        .notification-meta span {
            display: flex !important;
            align-items: center !important;
            margin-right: 1rem !important;
        }

        .notification-meta i {
            margin-right: 0.3rem !important;
            font-size: 0.9rem !important;
        }

    .pagination .page-link {
        color: #fff !important;
        background-color: #2c2c2c !important;
        border: 1px solid #3a3a3a !important;
        margin: 0 2px !important;
        border-radius: 4px !important;
        transition: all 0.2s !important;
    }

    .pagination .page-item.active .page-link {
        background-color: #7367f0 !important;
        border-color: #7367f0 !important;
        box-shadow: 0 2px 8px rgba(115, 103, 240, 0.5) !important;
    }

    .pagination .page-link:hover {
        background-color: #3a3a3a !important;
        border-color: #444 !important;
        transform: translateY(-1px) !important;
    }

    .filter-btn {
        background-color: #2c2c2c !important;
        border: 1px solid #3a3a3a !important;
        color: #fff !important;
        padding: 0.5rem 1rem !important;
        margin-right: 0.5rem !important;
        border-radius: 6px !important;
        cursor: pointer !important;
        transition: all 0.2s ease !important;
        font-size: 0.9rem !important;
    }

        .filter-btn:hover {
            background-color: #3a3a3a !important;
            transform: translateY(-1px) !important;
        }

        .filter-btn.active {
            background-color: #7367f0 !important;
            border-color: #7367f0 !important;
            box-shadow: 0 2px 8px rgba(115, 103, 240, 0.3) !important;
        }

    .filter-buttons {
        margin-bottom: 1.5rem !important;
        text-align: right !important;
        display: flex !important;
        justify-content: flex-end !important;
        flex-wrap: wrap !important;
    }

    .date-filter {
        display: flex !important;
        align-items: center !important;
        margin-bottom: 1.5rem !important;
    }

        .date-filter label {
            color: #fff !important;
            margin-right: 1rem !important;
            font-weight: 500 !important;
            white-space: nowrap !important;
        }

        .date-filter input {
            background-color: #2c2c2c !important;
            border: 1px solid #3a3a3a !important;
            color: #fff !important;
            padding: 0.5rem !important;
            border-radius: 6px !important;
            margin-right: 0.5rem !important;
        }

            .date-filter input:focus {
                outline: none !important;
                border-color: #7367f0 !important;
                box-shadow: 0 0 0 2px rgba(115, 103, 240, 0.2) !important;
            }

    #positionsChartContainer {
        height: 300px !important;
        width: 100% !important;
        position: relative !important;
    }

    .badge {
        padding: 0.4rem 0.7rem !important;
        border-radius: 12px !important;
        font-weight: 500 !important;
        font-size: 0.75rem !important;
        letter-spacing: 0.3px !important;
        text-transform: uppercase !important;
    }

    .badge-read {
        background-color: rgba(115, 103, 240, 0.15) !important;
        color: #7367f0 !important;
    }

    .empty-state {
        display: flex !important;
        flex-direction: column !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 2rem !important;
        color: #aaa !important;
        text-align: center !important;
    }

        .empty-state i {
            font-size: 3rem !important;
            margin-bottom: 1rem !important;
            opacity: 0.5 !important;
        }

        .empty-state p {
            font-size: 1.1rem !important;
            margin: 0 !important;
        }

    .close-btn {
        position: absolute !important;
        top: 1rem !important;
        right: 1rem !important;
        background: none !important;
        border: none !important;
        color: #aaa !important;
        font-size: 1.5rem !important;
        cursor: pointer !important;
        transition: color 0.2s !important;
        padding: 0 !important;
        width: 32px !important;
        height: 32px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        border-radius: 50% !important;
    }

        .close-btn:hover {
            color: #fff !important;
            background-color: rgba(255,255,255,0.1) !important;
        }

    .notification-date {
        color: #7367f0 !important;
        font-weight: 500 !important;
    }
</style>

<div id="particles-js"></div>

<div class="container-fluid py-0 dark-bg dark-theme d-flex align-items-start justify-content-center"
     style="position: relative; padding-top: 4rem !important;">

    <div class="row justify-content-center w-100">
        <div class="col-12 col-md-10 col-lg-8">

            @if (Model.Positions == null || !Model.Positions.Any())
            {
                <div class="card dark-card shadow px-3 py-4 mb-4">
                    <div class="card-body">
                        <h2 class="card-title mb-3">Преглед на AI позициите</h2>
                        <p class="text-muted">Все още няма отворени позиции.</p>
                    </div>
                </div>
            }
            else
            {
                <div class="card dark-card shadow px-3 py-4 mb-4">
                    <div class="card-body">
                        <h2 class="card-title mb-3" style="color:#fff;">Преглед на AI позициите</h2>
                        <p class="mb-3" style="color:#ccc;">
                            По-долу е дневна разбивка на сделките, извършени от AI на свързаните ви акаунти.
                            Всяка точка показва колко сделки са изпълнени на тази дата.
                            Задръжте курсора върху точка, за да видите колко са Покупки срещу Продажби,
                            и колко различни акаунти са участвали.
                        </p>
                        <div class="filter-buttons">
                            <button class="filter-btn active" data-days="7">Последна Седмица</button>
                            <button class="filter-btn" data-days="30">Последен Месец</button>
                            <button class="filter-btn" data-days="90">Последни 3 Месеца</button>
                            <button class="filter-btn" data-days="365">Последна Година</button>
                            <button class="filter-btn" data-days="0">Всички Времена</button>
                        </div>
                        <div id="positionsChartContainer">
                        </div>
                    </div>
                </div>
            }

            <div class="text-center mb-4">
                <h1 class="display-5 fw-bold mb-2" style="color: #fff !important;">Последни новини</h1>
                <p class="lead" style="color: #ccc !important;">Преглед на най-новите известия.</p>
            </div>

            <div class="card dark-card notification-card shadow px-3 py-4">
                <div class="card-body">
                    <h2 class="card-title mb-4" style="color: #fff !important;">Списък с известия</h2>

                    <div class="date-filter">
                        <label>Филтър по дата:</label>
                        <input type="date" id="aiStartDate" class="date-input">
                        <span style="color: #fff; margin: 0 0.5rem;">до</span>
                        <input type="date" id="aiEndDate" class="date-input">
                        <button class="btn btn-primary ms-2" id="aiApplyDateFilter">Приложи</button>
                        <button class="btn btn-secondary ms-2" id="aiResetDateFilter">Нулирай</button>
                    </div>

                    <div class="filter-buttons mb-3">
                        <button class="filter-btn active" data-notification-days="7">Последна Седмица</button>
                        <button class="filter-btn" data-notification-days="30">Последен Месец</button>
                        <button class="filter-btn" data-notification-days="90">Последни 3 Месеца</button>
                        <button class="filter-btn" data-notification-days="0">Всички</button>
                    </div>

                    <div style="background-color: transparent !important; margin: 0 !important; padding: 0 !important;">
                        <table class="table-custom">
                            <thead>
                                <tr>
                                    <th scope="col" style="border-radius: 8px 0 0 8px !important;">Заглавие</th>
                                    <th scope="col" class="text-center" style="width:120px; border-radius: 0 8px 8px 0 !important;">Действие</th>
                                </tr>
                            </thead>
                            <tbody id="aiNotificationsTableBody"></tbody>
                        </table>

                        <div id="aiEmptyNotifications" class="empty-state" style="display: none;">
                            <i class="fas fa-bell-slash"></i>
                            <p>Няма намерени известия за избрания период</p>
                        </div>
                    </div>

                    <nav class="mt-4">
                        <ul class="pagination pagination-sm justify-content-end" id="aiPagination"></ul>
                    </nav>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="modal" id="aiDashboardModal">
    <div class="modal-content">
        <button class="close-btn" id="aiCloseModalBtn">&times;</button>
        <div class="modal-header">
            <h3 class="modal-title" id="aiModalTitle"></h3>
        </div>
        <div class="modal-body" id="aiModalBody">
        </div>
        <div class="modal-footer">
            <div class="notification-meta">
                <span><i class="fas fa-calendar"></i> <span id="aiModalDate"></span></span>
                <span><i class="fas fa-eye"></i> <span id="aiModalReadCount"></span></span>
            </div>
            <button class="btn btn-secondary" id="aiCloseModalBtn2">Затвори</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
    <script src="~/js/particles-init.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    @Html.Partial("_IziToastPartial")
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

    <script>
        var chartPositions = @Json.Serialize(Model.Positions ?? new List<PositionChartDto>());
        var currentDayFilter = 7;
        var positionsChart;
        var aiNotificationDayFilter = 7;
        var aiDashboardModal = document.getElementById('aiDashboardModal');
        var aiCloseModalBtn = document.getElementById('aiCloseModalBtn');
        var aiCloseModalBtn2 = document.getElementById('aiCloseModalBtn2');
        var aiModalTitle = document.getElementById('aiModalTitle');
        var aiModalBody = document.getElementById('aiModalBody');
        var aiModalDate = document.getElementById('aiModalDate');
        var aiModalReadCount = document.getElementById('aiModalReadCount');
        var aiStartDateInput = document.getElementById('aiStartDate');
        var aiEndDateInput = document.getElementById('aiEndDate');
        var aiApplyDateFilterBtn = document.getElementById('aiApplyDateFilter');
        var aiResetDateFilterBtn = document.getElementById('aiResetDateFilter');

        document.addEventListener('DOMContentLoaded', function() {
            const chartContainer = document.getElementById("positionsChartContainer");

            if (chartContainer) {
                if (chartPositions && Array.isArray(chartPositions)) {
                    initFilterButtons();
                    createPositionsChart(currentDayFilter);
                } else {
                    createEmptyChart(chartContainer);
                }
            }

            initAiNotificationFilterButtons();
            loadAiNotifications(1);
            initAiModalEvents();
            initAiDateFilter();
        });

        function initAiModalEvents() {
            aiCloseModalBtn.addEventListener('click', closeAiModal);
            aiCloseModalBtn2.addEventListener('click', closeAiModal);

            window.addEventListener('click', function(event) {
                if (event.target === aiDashboardModal) {
                    closeAiModal();
                }
            });
        }

        function openAiModal(id, title, description, date, readCount) {
            aiModalTitle.textContent = title;
            aiModalBody.innerHTML = description;
            aiModalDate.textContent = date || 'Неизвестна дата';
            aiModalReadCount.textContent = readCount + ' прочитания';
            aiDashboardModal.classList.add('show');
            document.body.style.overflow = 'hidden';

            fetch(`/User/MarkNotificationAsRead?id=${id}`)
                .then(response => response.json())
                .catch(error => console.error('Error marking notification as read:', error));
        }

        function closeAiModal() {
            aiDashboardModal.classList.remove('show');
            document.body.style.overflow = '';

            setTimeout(function() {
                aiModalTitle.textContent = '';
                aiModalBody.innerHTML = '';
            }, 300);
        }

        function initAiDateFilter() {
            const today = new Date();

            const defaultStartDate = new Date();
            defaultStartDate.setDate(today.getDate() - 7);

            aiStartDateInput.valueAsDate = defaultStartDate;
            aiEndDateInput.valueAsDate = today;

            aiApplyDateFilterBtn.addEventListener('click', function() {
                loadAiNotifications(1);

                document.querySelectorAll('[data-notification-days]').forEach(btn => {
                    btn.classList.remove('active');
                });

                aiNotificationDayFilter = -1;
            });

            aiResetDateFilterBtn.addEventListener('click', function() {
                aiStartDateInput.valueAsDate = defaultStartDate;
                aiEndDateInput.valueAsDate = today;

                document.querySelector('[data-notification-days="7"]').click();
            });
        }

        function initFilterButtons() {
            var buttons = document.querySelectorAll("[data-days]");
            buttons.forEach(function(btn) {
                btn.addEventListener("click", function() {
                    buttons.forEach(function(b) { b.classList.remove("active"); });
                    btn.classList.add("active");
                    var days = parseInt(btn.getAttribute("data-days"));
                    currentDayFilter = days;
                    createPositionsChart(days);
                });
            });
        }

        function initAiNotificationFilterButtons() {
            var buttons = document.querySelectorAll("[data-notification-days]");
            buttons.forEach(function(btn) {
                btn.addEventListener("click", function() {
                    buttons.forEach(function(b) { b.classList.remove("active"); });
                    btn.classList.add("active");
                    var days = parseInt(btn.getAttribute("data-notification-days"));
                    aiNotificationDayFilter = days;
                    loadAiNotifications(1);
                });
            });
        }

        function filterPositionsByDays(days) {
            if (!chartPositions || !Array.isArray(chartPositions) || chartPositions.length === 0) {
                return [];
            }

            if (days === 0) {
                return chartPositions;
            }

            try {
                var latestDate = null;
                var validDatesCount = 0;

                chartPositions.forEach(function(pos, index) {
                    const openedAt = pos.openedAtIso || pos.OpenedAtIso;

                    if (!openedAt) {
                        return;
                    }

                    try {
                        var date = new Date(openedAt);
                        if (!isNaN(date.getTime())) {
                            validDatesCount++;
                            if (!latestDate || date > latestDate) {
                                latestDate = date;
                            }
                        }
                    } catch (err) {

                    }
                });

                if (!latestDate) {
                    return chartPositions;
                }

                var cutoffDate = new Date(latestDate);
                cutoffDate.setDate(cutoffDate.getDate() - days);

                var filteredPositions = chartPositions.filter(function(pos) {
                    const openedAt = pos.openedAtIso || pos.OpenedAtIso;

                    if (!openedAt) return false;

                    try {
                        var date = new Date(openedAt);
                        return !isNaN(date.getTime()) && date >= cutoffDate;
                    } catch (err) {
                        return false;
                    }
                });

                return filteredPositions;
            } catch (error) {
                return [];
            }
        }

        function createPositionsChart(days) {
            var positions = filterPositionsByDays(days);
            const chartContainer = document.getElementById('positionsChartContainer');

            if (positionsChart) {
                positionsChart.destroy();
            }

            if (!positions || positions.length === 0) {
                createEmptyChart(chartContainer);
                return;
            }

            try {
                var dateMap = {};
                var buyMap = {};
                var sellMap = {};
                var accountMap = {};

                positions.forEach(function(pos) {
                    const openedAt = pos.openedAtIso || pos.OpenedAtIso;
                    const type = pos.type || pos.Type;
                    const accountId = pos.accountId || pos.AccountId;

                    if (!openedAt) {
                        return;
                    }

                    try {
                        let dateObj = new Date(openedAt);
                        if (isNaN(dateObj.getTime())) {
                            return;
                        }

                        let dateStr = dateObj.toISOString().split('T')[0];

                        if (!dateMap[dateStr]) {
                            dateMap[dateStr] = 0;
                            buyMap[dateStr] = 0;
                            sellMap[dateStr] = 0;
                            accountMap[dateStr] = {};
                        }

                        dateMap[dateStr]++;

                        if (accountId) {
                            accountMap[dateStr][accountId] = true;
                        }

                        if (type === "Покупка") {
                            buyMap[dateStr]++;
                        } else if (type === "Продажба") {
                            sellMap[dateStr]++;
                        }
                    } catch (err) {

                    }
                });

                if (Object.keys(dateMap).length === 0) {
                    createEmptyChart(chartContainer);
                    return;
                }

                var dates = Object.keys(dateMap).sort();
                if (dates.length > 1) {
                    var startDate = new Date(dates[0]);
                    var endDate = new Date(dates[dates.length - 1]);
                    var continuousDates = [];
                    var currentDate = new Date(startDate);

                    while (currentDate <= endDate) {
                        var dateStr = currentDate.toISOString().split('T')[0];
                        continuousDates.push(dateStr);
                        currentDate.setDate(currentDate.getDate() + 1);
                    }

                    continuousDates.forEach(date => {
                        if (!dateMap[date]) {
                            dateMap[date] = 0;
                            buyMap[date] = 0;
                            sellMap[date] = 0;
                            accountMap[date] = {};
                        }
                    });

                    dates = continuousDates;
                }

                var counts = [];
                var buys = [];
                var sells = [];
                var accounts = [];
                var formattedDates = [];

                dates.forEach(date => {
                    counts.push(dateMap[date] || 0);
                    buys.push(buyMap[date] || 0);
                    sells.push(sellMap[date] || 0);
                    accounts.push(Object.keys(accountMap[date] || {}).length);

                    const dateObj = new Date(date);
                    const formattedDate = dateObj.toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                    });
                    formattedDates.push(formattedDate);
                });

                var canvas = document.createElement('canvas');
                canvas.id = 'tradesChart';
                canvas.style.width = '100%';
                canvas.style.height = '300px';
                chartContainer.innerHTML = '';
                chartContainer.appendChild(canvas);

                var ctx = canvas.getContext('2d');

                positionsChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: formattedDates,
                        datasets: [
                            {
                                label: 'Общо Сделки',
                                data: counts,
                                borderColor: 'rgb(115, 103, 240)',
                                backgroundColor: 'rgba(115, 103, 240, 0.1)',
                                borderWidth: 3,
                                pointRadius: 5,
                                pointHoverRadius: 7,
                                fill: true,
                                tension: 0.2
                            },
                            {
                                label: 'Сделки за Покупка',
                                data: buys,
                                borderColor: 'rgb(40, 199, 111)',
                                backgroundColor: 'rgba(40, 199, 111, 0.1)',
                                borderWidth: 2,
                                pointRadius: 4,
                                pointHoverRadius: 6,
                                fill: false,
                                tension: 0.2,
                                hidden: true
                            },
                            {
                                label: 'Сделки за Продажба',
                                data: sells,
                                borderColor: 'rgb(234, 84, 85)',
                                backgroundColor: 'rgba(234, 84, 85, 0.1)',
                                borderWidth: 2,
                                pointRadius: 4,
                                pointHoverRadius: 6,
                                fill: false,
                                tension: 0.2,
                                hidden: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    color: '#fff',
                                    usePointStyle: true,
                                    pointStyle: 'circle',
                                    padding: 15,
                                    font: {
                                        size: 12
                                    }
                                },
                                onClick: function(e, legendItem, legend) {
                                    const index = legendItem.datasetIndex;
                                    const ci = legend.chart;
                                    const meta = ci.getDatasetMeta(index);

                                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                                    ci.update();
                                }
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                backgroundColor: '#2c2c2c',
                                borderColor: '#444',
                                borderWidth: 1,
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                padding: 10,
                                callbacks: {
                                    afterTitle: function(context) {
                                        const index = context[0].dataIndex;
                                        return `Акаунти: ${accounts[index]}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: '#fff'
                                }
                            },
                            y: {
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: '#fff',
                                    precision: 0,
                                    stepSize: 1
                                },
                                min: 0
                            }
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeOutQuart'
                        }
                    }
                });
            } catch (error) {
                createEmptyChart(chartContainer);
            }
        }

        function createEmptyChart(container) {
            if (!container) {
                return;
            }

            if (positionsChart) {
                positionsChart.destroy();
            }

            container.innerHTML = '';

            try {
                var canvas = document.createElement('canvas');
                canvas.id = 'emptyTradesChart';
                canvas.style.width = '100%';
                canvas.style.height = '300px';
                container.appendChild(canvas);

                var ctx = canvas.getContext('2d');

                positionsChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [''],
                        datasets: [{
                            data: [0],
                            borderColor: 'rgba(0,0,0,0)',
                            backgroundColor: 'rgba(0,0,0,0)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: false
                            }
                        },
                        scales: {
                            x: {
                                display: false
                            },
                            y: {
                                display: false
                            }
                        },
                        elements: {
                            point: {
                                radius: 0
                            }
                        }
                    },
                    plugins: [{
                        id: 'emptyChartText',
                        afterDraw: function(chart) {
                            var ctx = chart.ctx;
                            var width = chart.width;
                            var height = chart.height;

                            ctx.save();
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.font = '16px Arial';
                            ctx.fillStyle = '#fff';
                            ctx.fillText('Няма Налични Данни за Сделки', width / 2, height / 2);
                            ctx.restore();
                        }
                    }]
                });
            } catch (error) {
                container.innerHTML = '<div style="height:100%; display:flex; align-items:center; justify-content:center; color:#fff; font-size:16px;">Няма Налични Данни за Сделки</div>';
            }
        }

        function loadAiNotifications(page) {
            let url = `/User/GetNotifications?page=${page}&pageSize=5`;

            if (aiNotificationDayFilter > 0) {
                const today = new Date();
                const pastDate = new Date();
                pastDate.setDate(today.getDate() - aiNotificationDayFilter);

                url += `&startDate=${pastDate.toISOString().split('T')[0]}&endDate=${today.toISOString().split('T')[0]}`;
            } else if (aiNotificationDayFilter === -1) {
                const startDate = aiStartDateInput.value;
                const endDate = aiEndDateInput.value;

                if (startDate && endDate) {
                    url += `&startDate=${startDate}&endDate=${endDate}`;
                }
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    console.log('Notification data:', data.notifications); 
                    renderAiNotifications(data.notifications);
                    renderAiPagination(data.currentPage, data.totalPages);

                    if (!data.notifications || data.notifications.length === 0) {
                        document.getElementById('aiEmptyNotifications').style.display = 'flex';
                    } else {
                        document.getElementById('aiEmptyNotifications').style.display = 'none';
                    }
                })
                .catch(error => console.error('Error fetching notifications:', error));
        }

        function renderAiNotifications(notifications) {
            const tbody = document.getElementById('aiNotificationsTableBody');
            tbody.innerHTML = '';

            if (!notifications || notifications.length === 0) {
                return;
            }

            notifications.forEach(note => {
                const row = document.createElement('tr');

                let dateDisplay = '';
                try {
                    if (note.dateTime) {
                        dateDisplay = note.dateTime;
                    }
                    else if (note.createdAt) {
                        dateDisplay = note.createdAt;
                    }

                    if (dateDisplay && dateDisplay.includes('T')) {
                        const date = new Date(dateDisplay);
                        if (!isNaN(date.getTime())) {
                            dateDisplay = date.toLocaleString('bg-BG', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                        }
                    }
                } catch (err) {
                    console.error('Error formatting date:', err);
                    dateDisplay = note.dateTime || note.createdAt || 'Без дата';
                }

                row.innerHTML = `
                    <td style="border-radius: 8px 0 0 8px !important;">
                        <a href="#"
                           class="notification-title"
                           data-id="${note.id}"
                           data-title="${note.title}"
                           data-description="${note.description}"
                           data-date="${dateDisplay}"
                           data-read-count="${note.totalReadCount}">
                           ${note.title}
                        </a>
                        <div class="notification-meta">
                            <span><i class="fas fa-calendar"></i> ${dateDisplay || 'Без дата'}</span>
                            <span><i class="fas fa-eye"></i> ${note.totalReadCount}</span>
                            <span class="badge badge-read">${note.isRead ? 'Прочетено' : 'Ново'}</span>
                        </div>
                    </td>
                    <td class="text-center" style="border-radius: 0 8px 8px 0 !important;">
                        <button class="btn btn-primary btn-sm view-ai-notification"
                                data-id="${note.id}"
                                data-title="${note.title}"
                                data-description="${note.description}"
                                data-date="${dateDisplay}"
                                data-read-count="${note.totalReadCount}"
                                style="margin: 0 !important;">
                            <i class="fas fa-eye"></i> Виж
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            bindAiNotificationEvents();
        }

        function bindAiNotificationEvents() {
            const titles = document.querySelectorAll("#aiNotificationsTableBody .notification-title");
            const viewButtons = document.querySelectorAll(".view-ai-notification");

            const openNotificationModal = function(element) {
                const id = element.getAttribute("data-id");
                const title = element.getAttribute("data-title");
                const description = element.getAttribute("data-description");
                const date = element.getAttribute("data-date");
                const readCount = element.getAttribute("data-read-count");

                openAiModal(id, title, description, date, readCount);
            };

            titles.forEach(title => {
                title.addEventListener("click", function(e) {
                    e.preventDefault();
                    openNotificationModal(title);
                });
            });

            viewButtons.forEach(button => {
                button.addEventListener("click", function(e) {
                    e.preventDefault();
                    openNotificationModal(button);
                });
            });
        }

        function renderAiPagination(currentPage, totalPages) {
            const pagination = document.getElementById('aiPagination');
            pagination.innerHTML = '';
            if (totalPages <= 1) {
                return;
            }

            const prevItem = document.createElement('li');
            prevItem.classList.add('page-item');
            if (currentPage === 1) {
                prevItem.classList.add('disabled');
            }
            const prevLink = document.createElement('a');
            prevLink.classList.add('page-link');
            prevLink.innerHTML = '<i class="fas fa-chevron-left"></i>';
            prevLink.href = '#';
            prevLink.addEventListener('click', e => {
                e.preventDefault();
                if (currentPage > 1) loadAiNotifications(currentPage - 1);
            });
            prevItem.appendChild(prevLink);
            pagination.appendChild(prevItem);

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);

            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            if (startPage > 1) {
                const firstItem = document.createElement('li');
                firstItem.classList.add('page-item');
                const firstLink = document.createElement('a');
                firstLink.classList.add('page-link');
                firstLink.innerText = '1';
                firstLink.href = '#';
                firstLink.addEventListener('click', e => {
                    e.preventDefault();
                    loadAiNotifications(1);
                });
                firstItem.appendChild(firstLink);
                pagination.appendChild(firstItem);

                if (startPage > 2) {
                    const ellipsisItem = document.createElement('li');
                    ellipsisItem.classList.add('page-item', 'disabled');
                    const ellipsisLink = document.createElement('a');
                    ellipsisLink.classList.add('page-link');
                    ellipsisLink.innerHTML = '&hellip;';
                    ellipsisItem.appendChild(ellipsisLink);
                    pagination.appendChild(ellipsisItem);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.classList.add('page-item');
                if (i === currentPage) {
                    pageItem.classList.add('active');
                }
                const pageLink = document.createElement('a');
                pageLink.classList.add('page-link');
                pageLink.href = '#';
                pageLink.innerText = i;
                pageLink.addEventListener('click', e => {
                    e.preventDefault();
                    loadAiNotifications(i);
                });
                pageItem.appendChild(pageLink);
                pagination.appendChild(pageItem);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsisItem = document.createElement('li');
                    ellipsisItem.classList.add('page-item', 'disabled');
                    const ellipsisLink = document.createElement('a');
                    ellipsisLink.classList.add('page-link');
                    ellipsisLink.innerHTML = '&hellip;';
                    ellipsisItem.appendChild(ellipsisLink);
                    pagination.appendChild(ellipsisItem);
                }

                const lastItem = document.createElement('li');
                lastItem.classList.add('page-item');
                const lastLink = document.createElement('a');
                lastLink.classList.add('page-link');
                lastLink.innerText = totalPages;
                lastLink.href = '#';
                lastLink.addEventListener('click', e => {
                    e.preventDefault();
                    loadAiNotifications(totalPages);
                });
                lastItem.appendChild(lastLink);
                pagination.appendChild(lastItem);
            }

            const nextItem = document.createElement('li');
            nextItem.classList.add('page-item');
            if (currentPage === totalPages) {
                nextItem.classList.add('disabled');
            }
            const nextLink = document.createElement('a');
            nextLink.classList.add('page-link');
            nextLink.innerHTML = '<i class="fas fa-chevron-right"></i>';
            nextLink.href = '#';
            nextLink.addEventListener('click', e => {
                e.preventDefault();
                if (currentPage < totalPages) loadAiNotifications(currentPage + 1);
            });
            nextItem.appendChild(nextLink);
            pagination.appendChild(nextItem);
        }
    </script>
}